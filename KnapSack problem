def unbounded_knapsack(num_cases, cases):
    results = []
    
    for case in cases:
        (num_items, target_sum) = case[0]
        elements = case[1]
        
        # Initialize dp array
        dp = [0] * (target_sum + 1)

        for element in elements:
            for current_sum in range(element, target_sum + 1):
                dp[current_sum] = max(dp[current_sum], dp[current_sum - element] + element)
        
        results.append(dp[target_sum])
    
    return results

import sys

input = sys.stdin.read
data = input().splitlines()

num_cases = int(data[0])
cases = []

line_index = 1
for _ in range(num_cases):
    num_items, target_sum = map(int, data[line_index].split())
    elements = list(map(int, data[line_index + 1].split()))
    cases.append(((num_items, target_sum), elements))
    line_index += 2

results = unbounded_knapsack(num_cases, cases)

for result in results:
    print(result)
